
hello_btf/hello.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <eBPF_Patch>:
; 	OPENSSL_LHASH *lh = (OPENSSL_LHASH *)REGS_PARM1(ctx);
       0:	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0)
       1:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       2:	67 01 00 00 20 00 00 00	r1 <<= 32
       3:	4f 21 00 00 00 00 00 00	r1 |= r2
; 	if (lh == NULL)
       4:	15 01 0d 00 00 00 00 00	if r1 == 0 goto +13 <LBB0_5>
       5:	61 12 18 00 00 00 00 00	r2 = *(u32 *)(r1 + 24)
; 	for (i = 0; i < lh->num_nodes; i++)
       6:	15 02 09 00 00 00 00 00	if r2 == 0 goto +9 <LBB0_4>
       7:	b7 03 00 00 00 00 00 00	r3 = 0
       8:	b7 04 00 00 00 00 00 00	r4 = 0
       9:	b7 05 00 00 00 00 00 00	r5 = 0

0000000000000050 <LBB0_3>:
; 		n = lh->b[i];
      10:	79 10 00 00 00 00 00 00	r0 = *(u64 *)(r1 + 0)
; 		lh->b[i] = NULL;
      11:	0f 40 00 00 00 00 00 00	r0 += r4
      12:	7b 30 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r3
; 	for (i = 0; i < lh->num_nodes; i++)
      13:	07 04 00 00 08 00 00 00	r4 += 8
      14:	07 05 00 00 01 00 00 00	r5 += 1
      15:	2d 52 fa ff 00 00 00 00	if r2 > r5 goto -6 <LBB0_3>

0000000000000080 <LBB0_4>:
      16:	b7 02 00 00 00 00 00 00	r2 = 0
; 	lh->num_items = 0;
      17:	7b 21 38 00 00 00 00 00	*(u64 *)(r1 + 56) = r2

0000000000000090 <LBB0_5>:
; }
      18:	b7 00 00 00 00 00 00 00	r0 = 0
      19:	95 00 00 00 00 00 00 00	exit
