diff --git a/src/btf.c b/src/btf.c
index 3aa58f2..598f091 100644
--- a/src/btf.c
+++ b/src/btf.c
@@ -6,6 +6,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <assert.h>
 #include <fcntl.h>
 #include <unistd.h>
 #include <errno.h>
@@ -27,6 +28,9 @@
 
 static struct btf_type btf_void;
 
+static int btf__add_anony_str(struct btf *btf, const char *s);
+static int btf__add_raw_str(struct btf *btf, const char *s);
+
 struct btf {
 	/* raw BTF data in native endianness */
 	void *raw_data;
@@ -1628,12 +1632,30 @@ int btf__find_str(struct btf *btf, const char *s)
 	return -ENOENT;
 }
 
+/* Modify for func Anonymous
+*/
+FILE *func_map = NULL;
+#define RECORD_FUNC_MAP(fmt, ...) \
+	do { \
+		if (func_map == NULL) func_map = fopen("func_name_hash.txt", "a+"); \
+		fprintf(func_map, fmt, ##__VA_ARGS__); \
+	} while (0);
+
 /* Add a string s to the BTF string section.
  * Returns:
  *   - > 0 offset into string section, on success;
  *   - < 0, on error.
+ *   ---------------- Modify! -------------------------
+ *   - < ignore all string. Except the Function name and Struct Filed Name
  */
 int btf__add_str(struct btf *btf, const char *s)
+{
+	// return 0;
+	return btf__add_raw_str(btf, "0");
+}
+
+// only int type use raw str
+static int btf__add_raw_str(struct btf *btf, const char *s)
 {
 	long old_off, new_off, len;
 	void *p;
@@ -1676,11 +1698,273 @@ int btf__add_str(struct btf *btf, const char *s)
 		return btf->start_str_off + old_off; /* duplicated string, return existing offset */
 	if (err)
 		return err;
+	
+	RECORD_FUNC_MAP("%s\n", s);
+	btf->hdr->str_len += len; /* new unique string, adjust data length */
+	return btf->start_str_off + new_off;
+}
+
+// BKDR Hash Function
+unsigned short BKDRHash(char *str)
+{
+	unsigned short seed = 131; // 31 131 1313 13131 131313 etc..
+	unsigned short hash = 0;
+	while (*str)
+	{
+		hash = hash * seed + (*str++);
+	}
+	return (hash & 0xFFFF);
+}
+
+unsigned short APHash(char *str)
+{
+	unsigned short hash = 0;
+	int i;
+	for (i=0; *str; i++)
+	{
+		if ((i & 1) == 0)
+		{
+			hash ^= ((hash << 7) ^ (*str++) ^ (hash >> 3));
+		}
+		else
+		{
+			hash ^= (~((hash << 11) ^ (*str++) ^ (hash >> 5)));
+		}
+	}
+	return (hash & 0xFFFF);
+}
+
+unsigned short DJBHash(char *str)
+{
+	unsigned short hash = 5381;
+	while (*str)
+	{
+		hash += (hash << 5) + (*str++);
+	}
+	return (hash & 0xFFFF);
+}
+
+unsigned short JSHash(char *str)
+{
+	unsigned int hash = 1315423911;
+	while (*str)
+	{
+		hash ^= ((hash << 5) + (*str++) + (hash >> 2));
+	}
+	return (hash & 0xFFFF);
+}
+
+static int hash_append_str(char *hash_str, const char *raw_str) {
+	int len = strlen(raw_str);
+	int end = strlen(hash_str);
+	assert(len + end < 128);
+	for (int i = 0; i < len; i++) {
+		hash_str[end + i] = raw_str[i];
+	}
+	hash_str[end + len] = 0;
+	return end + len;
+}
+
+#define ANONY_HASH_FUNC_NUM 4
+#define STR_HASH_ROUND (ANONY_HASH_FUNC_NUM + 1) // at last put raw string
+typedef unsigned short (*anony_str_hash_func)(char *str);
+anony_str_hash_func anony_str_hash[ANONY_HASH_FUNC_NUM] = {BKDRHash, APHash, DJBHash, JSHash};
+
+static void get_hash_str_n(int n, char *hash_str, const char *raw_str) {
+	char cur_hash[32] = {0};
+	hash_str[0] = 0;
+	// hashA|hashB|hashC|hashD|raw_str
+	for (int i = 0; i <= n && i < ANONY_HASH_FUNC_NUM; i++) {
+		if (i > 0) {
+			hash_append_str(hash_str, "|");
+		}
+		// #define HASH_TEST_COLLIDE 
+		#ifdef HASH_TEST_COLLIDE
+			if (strncmp(raw_str, "ngx_", 4) == 0) {
+				sprintf(cur_hash, "ngx_%d_%d", strlen(raw_str), i);
+			}
+			if (cur_hash[0] == 0) {
+				sprintf(cur_hash, "%hu", anony_str_hash[i]((char *) raw_str));
+			}
+		#else
+			sprintf(cur_hash, "%hu", anony_str_hash[i]((char *) raw_str));
+		#endif
+		hash_append_str(hash_str, cur_hash);
+	}
+	if (n >= ANONY_HASH_FUNC_NUM) {
+		hash_append_str(hash_str, "|");
+		hash_append_str(hash_str, raw_str);
+	}
+}
+
+/*
+* If a str's hash exists while the str is not added, it means that the two str's hash value collide. 
+*/
+struct hashmap *exist_strs = NULL;
+struct exist_str_buf {
+	char *buf;
+	int pos;
+	int cap;
+} exist_str_buf_s = {0};
+
+static size_t my_str_hash_fn(const void *key, void *ctx) {
+	const struct exist_str_buf *str_buf = ctx;
+	const char *str = str_buf->buf + (long) key;
+	return str_hash(str);
+}
+
+static bool my_str_equal_fn(const void *k1, const void *k2, void *ctx) {
+	const struct exist_str_buf *str_buf = ctx;
+	const char *str1 = str_buf->buf + (long) k1;
+	const char *str2 = str_buf->buf + (long) k2;
+	return strcmp(str1, str2) == 0;
+}
+
+static init_my_hashmap() {
+	if (exist_strs == NULL) {
+		exist_strs = hashmap__new(my_str_hash_fn, my_str_equal_fn, &exist_str_buf_s);
+		if (exist_strs == NULL) {
+			fprintf(stderr, "Failed to create hashmap for exist_strs");
+			exit(-1);
+			return false;
+		}
+	}
+}
+
+static int exist_str_buf_append_str(const char *str, int len) {
+	if (exist_str_buf_s.pos + len > exist_str_buf_s.cap) {
+		exist_str_buf_s.cap = exist_str_buf_s.cap * 2 + 32;
+		exist_str_buf_s.buf = realloc(exist_str_buf_s.buf, exist_str_buf_s.cap);
+	}
+	memcpy(exist_str_buf_s.buf + exist_str_buf_s.pos, str, len);
+	// int ret = exist_str_buf_s.pos;
+	return exist_str_buf_s.pos;
+}
+
+static void free_hash_buf() {
+	if (exist_str_buf_s.buf) {
+		free(exist_str_buf_s.buf);
+		exist_str_buf_s.buf = NULL;
+	}
+	if (exist_strs) {
+		hashmap__free(exist_strs);
+		exist_strs = NULL;
+	}
+}
+
+// return is exist(is added):true, not exist: false 
+static bool my_hash_add_str(const char *s) {
+	long new_off = 0;
+	int len = strlen(s) + 1;
+
+	// temply store the string
+	new_off = exist_str_buf_append_str(s, len);
+	int err = hashmap__insert(exist_strs, (void *)new_off, (void *)new_off,
+				HASHMAP_ADD, NULL, NULL);
+	if (err == -EEXIST) 
+		return true;
+	
+	// new string, add to exist_str_buf_s
+	exist_str_buf_s.pos += len; 
+	return false;
+}
+
+static bool my_hash_str_exist(const char *s) {
+	int len = strlen(s) + 1;
+	int new_off = exist_str_buf_append_str(s, len);
+	return hashmap__find(exist_strs, (void *)new_off, (void **)&new_off) != 0;
+}
+
+static void chack_and_add_to_cache(const char *raw_str, char *hash_str) {
+	assert(exist_strs != NULL);
+
+	char next_hash[128] = {0};
+	// get 
+	for (int i = 0; i < ANONY_HASH_FUNC_NUM; i++) {
+		get_hash_str_n(i, hash_str, raw_str);
+		get_hash_str_n(i + 1, next_hash, raw_str);
+		if (my_hash_str_exist(hash_str) && !my_hash_str_exist(next_hash)) {
+			break;
+		}
+		// if (hashmap__find(exist_strs, (void *)new_off, (void **)&old_off))
+	}
+	// add all str-hash of a raw string to hash map
+	for (int i = 0; i < ANONY_HASH_FUNC_NUM; i++) {
+		get_hash_str_n(i, next_hash, raw_str);
+		my_hash_add_str(next_hash);
+	}
+}
+
+static int btf__add_anony_str(struct btf *btf, const char *s)
+{
+	long old_off, new_off, len;
+	void *p;
+	int ret;
+	int err;
+
+	init_my_hashmap();
+
+	bool is_added = my_hash_str_exist(s);
+	
+	// is_added = true;
+	char func_hash[128] = {0};
+
+	if (is_added) {
+		/* fetch the correct hash value index for the string
+		* should consider the hash collide
+		* if cur_hash == hash && next_hash != hash return cur_hash
+		*/
+		char next_hash[128] = {0};
+		int ret_next = -ENOMEM;
+		for (int i = 0; i < ANONY_HASH_FUNC_NUM; i++) {
+			get_hash_str_n(i, func_hash, s);
+			get_hash_str_n(i + 1, next_hash, s);
+			ret = btf__find_str(btf, func_hash);
+			ret_next = btf__find_str(btf, next_hash);
+			// printf("ret: %d next: %d %s %d %d\n", ret, ret_next, func_hash, -ENOMEM, -EEXIST);
+			if ( ret > 0 && ret_next < 0) {
+				return ret;
+			}
+		}
+		// the last: hashA|hashB|hashC|hashD|raw_str
+		assert(ret_next != -ENOMEM);
+		return ret_next;
+	}
+	
+	if (btf_ensure_modifiable(btf))
+		return -ENOMEM;
+
+	// not exist
+	my_hash_add_str(s); // add raw string
+	// generate a unique func_hash for s
+	chack_and_add_to_cache(s, func_hash);
+
+	len = strlen(func_hash) + 1;
+	p = btf_add_str_mem(btf, len);
+	if (!p)
+		return -ENOMEM;
+
+	new_off = btf->hdr->str_len;
+	memcpy(p, func_hash, len);
+
+	old_off = btf->hdr->str_len;
+	err = hashmap__insert(btf->strs_hash, (void *)new_off, (void *)new_off,
+			HASHMAP_ADD, (const void **)&old_off, NULL);
+	if (err == -EEXIST) {
+		// should not exist
+		assert(0);
+	}
+	if (err)
+		return err;
+	if (new_off < 0)
+		return new_off;
+	RECORD_FUNC_MAP("%s %s\n", s, func_hash);
 
 	btf->hdr->str_len += len; /* new unique string, adjust data length */
 	return btf->start_str_off + new_off;
 }
 
+
 static void *btf_add_type_mem(struct btf *btf, size_t add_sz)
 {
 	return btf_add_mem(&btf->types_data, &btf->types_data_cap, 1,
@@ -1747,7 +2031,8 @@ int btf__add_int(struct btf *btf, const char *name, size_t byte_sz, int encoding
 	 * but that shouldn't be a problem, because BTF can't be constructed
 	 * completely anyway and will most probably be just discarded
 	 */
-	name_off = btf__add_str(btf, name);
+	// name_off = btf__add_str(btf, name);
+	name_off = btf__add_raw_str(btf, name);
 	if (name_off < 0)
 		return name_off;
 
@@ -1830,7 +2115,17 @@ static int btf_add_ref_kind(struct btf *btf, int kind, const char *name, int ref
 		return -ENOMEM;
 
 	if (name && name[0]) {
-		name_off = btf__add_str(btf, name);
+		switch (kind) {
+		case BTF_KIND_FUNC:
+			name_off = btf__add_anony_str(btf, name);
+			break;
+		case BTF_KIND_INT:
+			name_off = btf__add_raw_str(btf, name);
+			break;
+		default:
+			name_off = btf__add_raw_str(btf, "0");
+			break;
+		}
 		if (name_off < 0)
 			return name_off;
 	}
@@ -2008,7 +2303,8 @@ int btf__add_field(struct btf *btf, const char *name, int type_id,
 		return -ENOMEM;
 
 	if (name && name[0]) {
-		name_off = btf__add_str(btf, name);
+		// name_off = btf__add_str(btf, name);
+		name_off = btf__add_anony_str(btf, name);
 		if (name_off < 0)
 			return name_off;
 	}
