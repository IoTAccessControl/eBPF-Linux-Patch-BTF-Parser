diff --git a/tools/dump-btf/src/main.cpp b/tools/dump-btf/src/main.cpp
index 989d3c3..f87c59d 100644
--- a/tools/dump-btf/src/main.cpp
+++ b/tools/dump-btf/src/main.cpp
@@ -8,6 +8,11 @@
 
 #include "utils.h"
 
+#include <elf.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+
 #include <cstring>
 #include <iostream>
 
@@ -15,25 +20,116 @@ namespace {
 
 void showHelp() {
   std::cerr << "Usage:\n"
-            << "\tdump-btf /sys/kernel/btf/vmlinux\n"
-            << "\tdump-btf /sys/kernel/btf/vmlinux [/sys/kernel/btf/btusb]\n";
+            << "\tdump-btf file_with_btf\n";
 }
 
 } // namespace
 
+char *dumpAndParse(const char *elf_path, int fd) {
+  // 打开文件
+  FILE *fp;
+  // int fd;
+  fp = fopen(elf_path, "r+");
+  if (fp == NULL) {
+    printf("fail to open the file\n");
+    exit(-1);
+  }
+  // 解析head,判断elf文件类型
+  Elf64_Ehdr elf_head;
+  long unsigned int ret = fread(&elf_head, sizeof(Elf64_Ehdr), 1, fp);
+  if (ret == 0) {
+    printf("fail to read head\n");
+    exit(-1);
+  }
+
+  if (elf_head.e_ident[0] != 0x7F || elf_head.e_ident[1] != 'E' ||
+      elf_head.e_ident[2] != 'L' || elf_head.e_ident[3] != 'F') {
+    printf("Not a ELF file\n");
+    exit(-1);
+  }
+  // 解析section 分配内存 section * 数量
+  Elf64_Shdr *shdr =
+      (Elf64_Shdr *)malloc(sizeof(Elf64_Shdr) * elf_head.e_shnum);
+  if (shdr == NULL) {
+    printf("shdr malloc failed\n");
+    exit(-1);
+  }
+  // 设置fp偏移量 offset
+  ret = fseek(fp, elf_head.e_shoff,
+              SEEK_SET); // fseek调整指针的位置，采用参考位置+偏移量
+  if (ret != 0) {
+    printf("faile to fseek\n");
+    exit(-1);
+  }
+  // 读取section 到 shdr, 大小为shdr * 数量
+  ret = fread(shdr, sizeof(Elf64_Shdr) * elf_head.e_shnum, 1, fp);
+  if (ret == 0) {
+    printf("fail to read section\n");
+    exit(-1);
+  }
+  // 重置指针位置到文件流开头
+  rewind(fp);
+  // 将fp指针移到 '字符串表' 偏移位置处
+  fseek(fp, shdr[elf_head.e_shstrndx].sh_offset, SEEK_SET);
+  // 第e_shstrndx项是字符串表 定义 字节 长度 char类型 数组
+  long unsigned int shstrtab_len = shdr[elf_head.e_shstrndx].sh_size;
+  char *shstrtab;
+  shstrtab = (char *)malloc(shstrtab_len);
+  char *temp = shstrtab;
+  // 读取内容
+  ret = fread(shstrtab, shstrtab_len, 1, fp);
+  if (ret == 0) {
+    printf("faile to read\n");
+    exit(-1);
+  }
+  // 遍历
+  uint8_t *btf_data;
+  char *tmp_fn;
+  tmp_fn = (char *)malloc(4096);
+  for (int i = 0; i < elf_head.e_shnum; i++) {
+    temp = shstrtab;
+    temp = temp + shdr[i].sh_name;
+
+    if (strcmp(temp, ".BTF") != 0)
+      continue;
+    btf_data = (uint8_t *)malloc(sizeof(uint8_t) * shdr[i].sh_size);
+    fseek(fp, shdr[i].sh_offset, SEEK_SET);
+    long unsigned int read_size =
+        fread(btf_data, sizeof(uint8_t) * shdr[i].sh_size, 1, fp);
+    if (read_size <= 0) {
+      printf("fread() failed!\n");
+      exit(-1);
+    }
+
+    // 生成一个tmp文件，最后删除
+    snprintf(tmp_fn, 4096, "%s.btf", elf_path);
+    fd = creat(tmp_fn, S_IRUSR | S_IWUSR);
+    if (fd == -1) {
+      printf("open(%s) failed!\n", tmp_fn);
+      exit(-1);
+    }
+    long unsigned int write_size =
+        write(fd, btf_data, sizeof(uint8_t) * shdr[i].sh_size);
+    if (write_size != sizeof(uint8_t) * shdr[i].sh_size) {
+      printf("%s: write of %ld bytes to '%s' failed\n", __func__,
+             sizeof(uint8_t) * shdr[i].sh_size, tmp_fn);
+      unlink(tmp_fn);
+    }
+  }
+  return tmp_fn;
+}
+
 int main(int argc, char *argv[]) {
   if (argc <= 1 || std::strcmp(argv[1], "--help") == 0) {
     showHelp();
     return 0;
   }
 
-  std::vector<std::filesystem::path> path_list;
-  for (int i = 1; i < argc; ++i) {
-    const char *input_path = argv[i];
-    path_list.emplace_back(input_path);
-  }
+  char *path_list;
+  int fd = -1;
+  path_list = dumpAndParse(argv[1], fd);
 
-  auto btf_res = btfparse::IBTF::createFromPathList(path_list);
+  auto btf_res = btfparse::IBTF::createFromPath(path_list);
   if (btf_res.failed()) {
     std::cerr << "Failed to open the BTF file: " << btf_res.takeError() << "\n";
     return 1;
@@ -53,5 +149,8 @@ int main(int argc, char *argv[]) {
               << " " << btf_type << "\n";
   }
 
+  if (fd != -1)
+    close(fd);
+  free(path_list);
   return 0;
 }
 